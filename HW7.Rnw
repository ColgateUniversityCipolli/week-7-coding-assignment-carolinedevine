\documentclass{article}
\usepackage[margin=1.0in]{geometry} % To set margins
\usepackage{amsmath}  % This allows me to use the align functionality.
                      % If you find yourself trying to replicate
                      % something you found online, ensure you're
                      % loading the necessary packages!
\usepackage{amsfonts} % Math font
\usepackage{fancyvrb}
\usepackage{hyperref} % For including hyperlinks
\usepackage[shortlabels]{enumitem}% For enumerated lists with labels specified
                                  % We had to run tlmgr_install("enumitem") in R
\usepackage{float}    % For telling R where to put a table/figure
\usepackage{natbib}        %For the bibliography
\bibliographystyle{apalike}%For the bibliography

\begin{document}
  \begin{enumerate}
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % Question 1
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    \item Write a \texttt{pois.prob()} function that computes $P(X=x)$, 
    $P(X \neq x)$, $P(X<x)$, $P(X \leq x)$, $P(X > x)$, and $P(X \geq x).$ Enable the user to specify the rate parameter $\lambda$.
<<size="scriptsize">>=
pois.prob <- function(x, lambda, type){
  # inputs are x, lambda (only parameter of Poison Distribution, and 
  #the probability we want to compute
  # lambda = the mean number of events
  
  # Use dpois and ppois to conditionally return the correct probability
  
  if (type == "=="){
    # P(X = x) -> pmf
    output = dpois(x, lambda)
  }else if (type == "!="){
    # P(X != x) -> complement rule
    output = 1 - (dpois(x, lambda))
  }else if (type == "<"){
    # P(X < x) -> uses cdf
    output = ppois((x-1), lambda)
  }else if (type == "<="){
    # P(X <= x) -> cdf
    output = ppois(x, lambda)
  }else if (type == ">"){
    # P(X > x) -> cdf + complement rule
    output = 1 - (ppois(x, lambda))
  }else if (type == ">="){
    # P(X >= x) -> cdf + complement rule
    output = 1 - (ppois((x-1), lambda))
  } 
  return(output)
  
}

# Example Run Through
# Question: P( X = x) where x = 0, lambda = 2 following Poison Distribution
pois.prob(x = 0, lambda = 2,"==")
# Correct, outputs 0.1353 and that is e^-2 which is the answer
#when calculated analytically
@
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % Question 2
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    \item Write a \texttt{beta.prob()} function that computes $P(X=x)$, 
    $P(X \neq x)$, $P(X<x)$, $P(X \leq x)$, $P(X > x)$, and $P(X \geq x)$
    for a beta distribution. Enable the user to specify the shape parameters
    $\alpha$ and $\beta$.
<<size="scriptsize">>=
beta.prob <- function(x, alpha, beta, type){
  # alpha = success parameter
  # beta = failure parameter
  # support = [0,1] inclusive
  # Beta Distribution is continuous, not discrete
  
  
  # Use dbeta and pbeta to conditionally return the correct probability
  if (type == "=="){
    # P(X = x) -> pdf
    output = dbeta(x, alpha, beta)
  }else if (type == "!="){
    # P(X != x) -> pdf, complement rule
    output = 1 - (dbeta(x, alpha, beta))
  }else if (type == "<"){
    # P(X < x) -> uses cdf      -> same as <=
    output = pbeta(x, alpha, beta)
  }else if (type == "<="){
    # P(X <= x) -> cdf , same as < due to continuous
    output = pbeta(x, alpha, beta)
  }else if (type == ">"){
    # P(X > x) -> cdf + complement rule
    output = 1 - (pbeta(x, alpha, beta))
  }else if (type == ">="){
    # P(X >= x) -> cdf + complement rule, same as >
    output = 1 - (pbeta(x, alpha, beta))
  }
  return(output)
  
}

# Example Run Through
beta.prob(x = 0.4, alpha = 2, beta = 5, ">=")

@
\end{enumerate}
\bibliography{bibliography}
\end{document}
